{{~#if cfg.pgbouncer.databases}}
[databases]

{{~#each cfg.pgbouncer.databases as |database|}}
{{database}}
{{~/each}}
{{~/if}}

[pgbouncer]

;;;
;;; Administrative settings
;;;

logfile = {{cfg.pgbouncer.logdir}}/{{cfg.pgbouncer.logfile}}
pidfile = {{cfg.pgbouncer.piddir}}/{{cfg.pgbouncer.pidfile}}

;;;
;;; Where to wait for clients
;;;

; ip address or * which means all ip-s
listen_addr = {{cfg.pgbouncer.listen_addr}}
listen_port = {{cfg.pgbouncer.listen_port}}

{{~#if cfg.pgbouncer.client_tls}}
;;;
;;; TLS settings for accepting clients
;;;

{{~#if cfg.pgbouncer.client_tls.sslmode}}
;; disable, allow, require, verify-ca, verify-full
client_tls_sslmode = {{cfg.pgbouncer.client_tls.sslmode}}
{{~/if}}

{{~#if cfg.pgbouncer.client_tls.ca_file}}
;; Path to file that contains trusted CA certs
client_tls_ca_file = {{cfg.pgbouncer.client_tls.ca_file}}
{{~/if}}

{{~#if cfg.pgbouncer.client_tls.key_file}}
;; Private key and cert to present to clients.
;; Required for accepting TLS connections from clients.
client_tls_key_file = {{cfg.pgbouncer.client_tls.key_file}}
client_tls_cert_file = {{cfg.pgbouncer.client_tls.cert_file}}
{{~/if}}

{{~#if cfg.pgbouncer.client_tls.ciphers}}
;; fast, normal, secure, legacy, <ciphersuite string>
;client_tls_ciphers = {{cfg.pgbouncer.client_tls.ciphers}}
{{~/if}}

{{~#if cfg.pgbouncer.client_tls.key_file}}
;; all, secure, tlsv1.0, tlsv1.1, tlsv1.2
client_tls_protocols = {{cfg.pgbouncer.client_tls.protocols}}
{{~/if}}

{{~#if cfg.pgbouncer.client_tls.dheparams}}
;; none, auto, legacy
client_tls_dheparams = {{cfg.pgbouncer.client_tls.dheparams}}
{{~/if}}

{{~#if cfg.pgbouncer.client_tls.ecdhcurve}}
;; none, auto, <curve name>
client_tls_ecdhcurve = {{cfg.pgbouncer.client_tls.ecdhcurve}}
{{~/if}}
{{~/if}}

{{~#if cfg.pgbouncer.server_tls}}
;;;
;;; TLS settings for connecting to backend databases
;;;

{{~#if cfg.pgbouncer.server_tls.sslmode}}
;; disable, allow, require, verify-ca, verify-full
server_tls_sslmode = {{cfg.pgbouncer.server_tls.sslmode}}
{{~/if}}

{{~#if cfg.pgbouncer.server_tls.ca_file}}
;; Path to that contains trusted CA certs
server_tls_ca_file = {{cfg.pgbouncer.server_tls.ca_file}}
{{~/if}}

{{~#if cfg.pgbouncer.server_tls.key_file}}
;; Private key and cert to present to backend.
;; Needed only if backend server require client cert.
server_tls_key_file = {{cfg.pgbouncer.server_tls.key_file}}
server_tls_cert_file = {{cfg.pgbouncer.server_tls.cert_file}}
{{~/if}}

{{~#if cfg.pgbouncer.server_tls.protocols}}
;; all, secure, tlsv1.0, tlsv1.1, tlsv1.2
server_tls_protocols = {{cfg.pgbouncer.server_tls.protocols}}
{{~/if}}

{{~#if cfg.pgbouncer.server_tls.ciphers}}
;; fast, normal, secure, legacy, <ciphersuite string>
server_tls_ciphers = {{cfg.pgbouncer.server_tls.ciphers}}
{{~/if}}
{{~/if}}

;;;
;;; Authentication settings
;;;

; any, trust, plain, crypt, md5
auth_type = {{cfg.pgbouncer.auth_type}}
auth_file = {{cfg.pgbouncer.auth_file}}

{{~#if cfg.pgbouncer.auth_hba_file}}
;; Path to HBA-style auth config
auth_hba_file = {{cfg.pgbouncer.auth_hba_file}}
{{~/if}}

{{~#if cfg.pgbouncer.auth_query}}
;; Query to use to fetch password from database.  Result
;; must have 2 columns - username and password hash.
auth_query = {{cfg.pgbouncer.auth_query}}
{{~/if}}

;;;
;;; Users allowed into database 'pgbouncer'
;;;

{{~#if cfg.pgbouncer.admin_users}}
; comma-separated list of users, who are allowed to change settings
admin_users = {{cfg.pgbouncer.admin_users}}
{{~/if}}

{{~#if cfg.pgbouncer.stats_users}}
; comma-separated list of users who are just allowed to use SHOW command
stats_users = {{cfg.pgbouncer.stats_users}}
{{~/if}}

;;;
;;; Pooler personality questions
;;;

; When server connection is released back to pool:
;   session      - after client disconnects
;   transaction  - after transaction finishes
;   statement    - after statement finishes
pool_mode = {{cfg.pgbouncer.pool_mode}}

;
; Query for cleaning connection immediately after releasing from client.
; No need to put ROLLBACK here, pgbouncer does not reuse connections
; where transaction is left open.
;
; Query for 8.3+:
;   DISCARD ALL;
;
; Older versions:
;   RESET ALL; SET SESSION AUTHORIZATION DEFAULT
;
; Empty if transaction pooling is in use.
;
server_reset_query = {{cfg.pgbouncer.server_reset_query}}

{{~#if cfg.pgbouncer.server_reset_query_always}}
; Whether server_reset_query should run in all pooling modes.
; If it is off, server_reset_query is used only for session-pooling.
server_reset_query_always = {{cfg.pgbouncer.server_reset_query_always}}
{{~/if}}

{{~#if cfg.pgbouncer.server_reset_query_always}}
;
; Comma-separated list of parameters to ignore when given
; in startup packet.  Newer JDBC versions require the
; extra_float_digits here.
;
ignore_startup_parameters = {{cfg.pgbouncer.ignore_startup_parameters}}
{{~/if}}

{{~#if cfg.pgbouncer.server_check_query}}
;
; When taking idle server into use, this query is ran first.
;   SELECT 1
;
server_check_query = {{cfg.pgbouncer.server_check_query}}
{{~/if}}

{{~#if cfg.pgbouncer.server_check_delay}}
; If server was used more recently that this many seconds ago,
; skip the check query.  Value 0 may or may not run in immediately.
server_check_delay = {{cfg.pgbouncer.server_check_delay}}
{{~/if}}

{{~#if cfg.pgbouncer.server_check_delay}}
;; Use <appname - host> as application_name on server.
application_name_add_host = {{cfg.pgbouncer.application_name_add_host}}
{{~/if}}

;;;
;;; Connection limits
;;;

{{~#if cfg.pgbouncer.max_client_conn}}
; total number of clients that can connect
max_client_conn = {{cfg.pgbouncer.max_client_conn}}
{{~/if}}

{{~#if cfg.pgbouncer.default_pool_size}}
; default pool size.  20 is good number when transaction pooling
; is in use, in session pooling it needs to be the number of
; max clients you want to handle at any moment
default_pool_size = {{cfg.pgbouncer.default_pool_size}}
{{~/if}}


{{~#if cfg.pgbouncer.min_pool_size}}
;; Minimum number of server connections to keep in pool.
min_pool_size = {{cfg.pgbouncer.min_pool_size}}
{{~/if}}

{{~#if cfg.pgbouncer.min_pool_size}}
; how many additional connection to allow in case of trouble
reserve_pool_size = {{cfg.pgbouncer.reserve_pool_size}}
{{~/if}}

{{~#if cfg.pgbouncer.min_pool_size}}
; if a clients needs to wait more than this many seconds, use reserve pool
reserve_pool_timeout = {{cfg.pgbouncer.reserve_pool_timeout}}
{{~/if}}

{{~#if cfg.pgbouncer.max_db_connections}}
; how many total connections to a single database to allow from all pools
max_db_connections = {{cfg.pgbouncer.max_db_connections}}
{{~/if}}
{{~#if cfg.pgbouncer.max_user_connections}}
max_user_connections = {{cfg.pgbouncer.max_user_connections}}
{{~/if}}

{{~#if cfg.pgbouncer.server_round_robin}}
; If off, then server connections are reused in LIFO manner
server_round_robin = {{cfg.pgbouncer.server_round_robin}}
{{~/if}}

;;;
;;; Logging
;;;

{{~#if cfg.pgbouncer.syslog}}
;; Syslog settings
syslog = {{cfg.pgbouncer.syslog}}
{{~/if}}
{{~#if cfg.pgbouncer.syslog_facility}}
syslog_facility = {{syslog_facility}}
{{~/if}}
{{~#if cfg.pgbouncer.syslog_facility}}
syslog_ident = {{cfg.pgbouncer.syslog_facility}}
{{~/if}}

{{~#if cfg.pgbouncer.log_connections}}
; log if client connects or server connection is made
log_connections = {{cfg.pgbouncer.log_connections}}
{{~/if}}

{{~#if cfg.pgbouncer.log_disconnections}}
; log if and why connection was closed
log_disconnections = {{cfg.pgbouncer.log_disconnections}}
{{~/if}}

{{~#if cfg.pgbouncer.log_pooler_errors}}
; log error messages pooler sends to clients
log_pooler_errors = {{cfg.pgbouncer.log_pooler_errors}}
{{~/if}}

{{~#if cfg.pgbouncer.stats_period}}
;; Period for writing aggregated stats into log.
stats_period = {{cfg.pgbouncer.stats_period}}
{{~/if}}

{{~#if cfg.pgbouncer.verbose}}
;; Logging verbosity.  Same as -v switch on command line.
verbose={{cfg.pgbouncer.verbose}}
{{~/if}}

;;;
;;; Timeouts
;;;

{{~#if cfg.pgbouncer.server_lifetime}}
;; Close server connection if its been connected longer.
server_lifetime = {{cfg.pgbouncer.server_lifetime}}
{{~/if}}

{{~#if cfg.pgbouncer.server_idle_timeout}}
;; Close server connection if its not been used in this time.
;; Allows to clean unnecessary connections from pool after peak.
server_idle_timeout = {{cfg.pgbouncer.server_idle_timeout}}
{{~/if}}

{{~#if cfg.pgbouncer.server_connect_timeout}}
;; Cancel connection attempt if server does not answer takes longer.
server_connect_timeout = {{cfg.pgbouncer.server_connect_timeout}}
{{~/if}}

{{~#if cfg.pgbouncer.server_login_retry}}
;; If server login failed (server_connect_timeout or auth failure)
;; then wait this many second.
server_login_retry = {{cfg.pgbouncer.server_login_retry}}
{{~/if}}

{{~#if cfg.pgbouncer.query_timeout}}
;; Dangerous.  Server connection is closed if query does not return
;; in this time.  Should be used to survive network problems,
;; _not_ as statement_timeout. (default: 0)
query_timeout = {{cfg.pgbouncer.query_timeout}}
{{~/if}}

{{~#if cfg.pgbouncer.query_wait_timeout}}
;; Dangerous.  Client connection is closed if the query is not assigned
;; to a server in this time.  Should be used to limit the number of queued
;; queries in case of a database or network failure. (default: 120)
query_wait_timeout = {{cfg.pgbouncer.query_wait_timeout}}
{{~/if}}

{{~#if cfg.pgbouncer.client_idle_timeout}}
;; Dangerous.  Client connection is closed if no activity in this time.
;; Should be used to survive network problems. (default: 0)
client_idle_timeout = {{cfg.pgbouncer.client_idle_timeout}}
{{~/if}}

{{~#if cfg.pgbouncer.client_idle_timeout}}
;; Disconnect clients who have not managed to log in after connecting
;; in this many seconds.
client_login_timeout = {{cfg.pgbouncer.client_idle_timeout}}
{{~/if}}

{{~#if cfg.pgbouncer.autodb_idle_timeout}}
;; Clean automatically created database entries (via "*") if they
;; stay unused in this many seconds.
autodb_idle_timeout = {{cfg.pgbouncer.autodb_idle_timeout}}
{{~/if}}

{{~#if cfg.pgbouncer.suspend_timeout}}
;; How long SUSPEND/-R waits for buffer flush before closing connection.
suspend_timeout = {{cfg.pgbouncer.suspend_timeout}}
{{~/if}}

{{~#if cfg.pgbouncer.idle_transaction_timeout}}
;; Close connections which are in "IDLE in transaction" state longer than
;; this many seconds.
idle_transaction_timeout = {{cfg.pgbouncer.idle_transaction_timeout}}
{{~/if}}

;;;
;;; Low-level tuning options
;;;

{{~#if cfg.pgbouncer.pkt_buf}}
;; buffer for streaming packets
pkt_buf = {{cfg.pgbouncer.pkt_buf}}
{{~/if}}

{{~#if cfg.pgbouncer.listen_backlog}}
;; man 2 listen
listen_backlog = {{cfg.pgbouncer.listen_backlog}}
{{~/if}}

{{~#if cfg.pgbouncer.sbuf_loopcnt}}
;; Max number pkt_buf to process in one event loop.
sbuf_loopcnt = {{cfg.pgbouncer.sbuf_loopcnt}}
{{~/if}}

{{~#if cfg.pgbouncer.max_packet_size}}
;; Maximum Postgres protocol packet size.
max_packet_size = {{cfg.pgbouncer.max_packet_size}}
{{~/if}}

;; networking options, for info: man 7 tcp

{{~#if cfg.pgbouncer.tcp_defer_accept}}
;; Linux: notify program about new connection only if there
;; is also data received.  (Seconds to wait.)
;; On Linux the default is 45, on other OS'es 0.
tcp_defer_accept = {{cfg.pgbouncer.tcp_defer_accept}}
{{~/if}}

{{~#if cfg.pgbouncer.tcp_socket_buffer}}
;; In-kernel buffer size (Linux default: 4096)
tcp_socket_buffer = {{cfg.pgbouncer.tcp_socket_buffer}}
{{~/if}}

{{~#if cfg.pgbouncer.tcp_keepalive}}
;; whether tcp keepalive should be turned on (0/1)
tcp_keepalive = {{cfg.pgbouncer.tcp_keepalive}}

{{~#if cfg.pgbouncer.tcp_keepcnt}}
;; count of keepaliva packets
tcp_keepcnt = {{cfg.pgbouncer.tcp_keepcnt}}
{{~/if}}

{{~#if cfg.pgbouncer.tcp_keepidle}}
;; how long the connection can be idle,
;; before sending keepalive packets
tcp_keepidle = {{cfg.pgbouncer.tcp_keepidle}}
{{~/if}}

{{~#if cfg.pgbouncer.tcp_keepintvl}}
;; The time between individual keepalive probes.
tcp_keepintvl = {{cfg.pgbouncer.tcp_keepintvl}}
{{~/if}}
{{~/if}}

{{~#if cfg.pgbouncer.dns_max_ttl}}
;; DNS lookup caching time
dns_max_ttl = {{cfg.pgbouncer.dns_max_ttl}}
{{~/if}}

{{~#if cfg.pgbouncer.dns_zone_check_period}}
;; DNS zone SOA lookup period
dns_zone_check_period = {{cfg.pgbouncer.dns_zone_check_period}}
{{~/if}}

{{~#if cfg.pgbouncer.dns_nxdomain_ttl}}
;; DNS negative result caching time
dns_nxdomain_ttl = {{cfg.pgbouncer.dns_nxdomain_ttl}}
{{~/if}}

;;;
;;; Random stuff
;;;

{{~#if cfg.pgbouncer.disable_pqexec}}
;; Hackish security feature.  Helps against SQL-injection - when PQexec is disabled,
;; multi-statement cannot be made.
disable_pqexec={{cfg.pgbouncer.disable_pqexec}}
{{~/if}}
